rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is super admin (platform-wide access)
    function isSuperAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.systemRole == 'super_admin';
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if user belongs to organization (via organizationId field)
    function belongsToOrg(orgId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == orgId;
    }
    
    // Check if user has specific role in organization
    function hasOrgRole(orgId, role) {
      return isAuthenticated() && 
             belongsToOrg(orgId) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Check if user is admin or manager
    function isAdminOrManager(orgId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return isAuthenticated() && 
             belongsToOrg(orgId) &&
             (userDoc.role == 'admin' || userDoc.role == 'manager');
    }
    
    // Check if resource belongs to user's organization
    function resourceBelongsToUserOrg() {
      return isAuthenticated() && 
             resource.data.organizationId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId;
    }
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if isAuthenticated();
      
      // Users can create their own profile, super admins can create any
      allow create: if isOwner(userId) || isSuperAdmin();
      
      // Users can update their own profile, super admins can update any
      allow update: if isOwner(userId) || isSuperAdmin();
      
      // Only admins can delete users
      allow delete: if false; // Soft delete only
    }
    
    // ============================================
    // ORGANIZATIONS COLLECTION
    // ============================================
    
    match /organizations/{orgId} {
      // Super admins can do everything, members can read their org
      allow read: if isSuperAdmin() || belongsToOrg(orgId);
      
      // Super admins and authenticated users can create
      allow create: if isSuperAdmin() || isAuthenticated();
      
      // Super admins and org admins can update
      allow update: if isSuperAdmin() || hasOrgRole(orgId, 'admin');
      
      // Only super admins can delete organizations
      allow delete: if isSuperAdmin();
    }
    
    // ============================================
    // INVITATIONS COLLECTION
    // ============================================
    
    match /invitations/{invitationId} {
      // Super admins can read all invitations
      // Anyone can read pending invitations (needed for signup)
      // Org admins can read invitations for their organization
      allow read: if isSuperAdmin() || 
                     resource.data.status == 'pending' ||
                     (isAuthenticated() && resource.data.organizationId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId);
      
      // Super admins can create invitations
      // Org admins can create invitations for their organization
      allow create: if isSuperAdmin() || 
                       (isAuthenticated() && 
                        request.resource.data.organizationId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Super admins can update invitations
      // Anyone can update to accept invitation (during signup)
      allow update: if isSuperAdmin() || 
                       (resource.data.status == 'pending' && request.resource.data.status == 'accepted');
      
      // Super admins can delete invitations
      // Org admins can delete their organization's invitations
      allow delete: if isSuperAdmin() ||
                       (isAuthenticated() && 
                        resource.data.organizationId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId &&
                        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // ============================================
    // SYSTEM SETTINGS COLLECTION
    // ============================================
    
    match /system_settings/{settingId} {
      // Super admins can read all settings
      allow read: if isSuperAdmin();
      
      // Super admins can create settings
      allow create: if isSuperAdmin();
      
      // Super admins can update settings
      allow update: if isSuperAdmin();
      
      // Super admins can delete settings
      allow delete: if isSuperAdmin();
    }
    
    // ============================================
    // PROJECTS COLLECTION - POG Execution & Reset Management
    // ============================================
    
    match /projects/{projectId} {
      // All org members can read projects (visibility for all)
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      
      // Only admins and managers can create projects
      allow create: if isAuthenticated() && 
                       belongsToOrg(request.resource.data.organizationId) &&
                       isAdminOrManager(request.resource.data.organizationId);
      
      // Only admins and managers can update projects
      allow update: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
      
      // Only admins and managers can delete projects
      allow delete: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
      
      // Project tasks subcollection
      match /tasks/{taskId} {
        allow read: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/projects/$(projectId)).data.organizationId);
        allow write: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/projects/$(projectId)).data.organizationId);
      }
      
      // Project files subcollection
      match /files/{fileId} {
        allow read: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/projects/$(projectId)).data.organizationId);
        allow write: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/projects/$(projectId)).data.organizationId);
      }
    }
    
    // ============================================
    // TASKS COLLECTION (Global)
    // ============================================
    
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      allow create: if isAuthenticated() && belongsToOrg(request.resource.data.organizationId);
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.assignedTo ||
        request.auth.uid == resource.data.createdBy ||
        isAdminOrManager(resource.data.organizationId)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        isAdminOrManager(resource.data.organizationId)
      );
    }
    
    // ============================================
    // PRODUCTS COLLECTION
    // ============================================
    
    match /products/{productId} {
      // All org members can read products
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      
      // Only admins and managers can create products
      allow create: if isAuthenticated() && 
                       belongsToOrg(request.resource.data.organizationId) &&
                       isAdminOrManager(request.resource.data.organizationId);
      
      // Only admins and managers can update products
      allow update: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
      
      // Only admins and managers can delete products
      allow delete: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
    }
    
    // ============================================
    // PACKAGING TYPES COLLECTION
    // ============================================
    
    match /packagingTypes/{packagingTypeId} {
      // All authenticated users can read
      allow read: if isAuthenticated();
      
      // Only admins and managers can create, update, delete
      allow create: if isAuthenticated() && 
                       isAdminOrManager(request.resource.data.organizationId);
      allow update: if isAuthenticated() && 
                       isAdminOrManager(resource.data.organizationId);
      allow delete: if isAuthenticated() && 
                       isAdminOrManager(resource.data.organizationId);
    }
    
    // ============================================
    // CATEGORIES COLLECTION
    // ============================================
    
    match /categories/{categoryId} {
      // All authenticated users can read
      allow read: if isAuthenticated();
      
      // Only admins and managers can create, update, delete
      allow create: if isAuthenticated() && 
                       isAdminOrManager(request.resource.data.organizationId);
      allow update: if isAuthenticated() && 
                       isAdminOrManager(resource.data.organizationId);
      allow delete: if isAuthenticated() && 
                       isAdminOrManager(resource.data.organizationId);
    }
    
    // ============================================
    // FIXTURES COLLECTION
    // ============================================
    
    match /fixtures/{fixtureId} {
      // All org members can read fixtures
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      
      // All org members can create fixtures
      allow create: if isAuthenticated() && belongsToOrg(request.resource.data.organizationId);
      
      // Creator and admins can update
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        isAdminOrManager(resource.data.organizationId)
      );
      
      // Only creator and admins can delete
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        isAdminOrManager(resource.data.organizationId)
      );
    }
    
    // ============================================
    // PLANOGRAMS COLLECTION
    // ============================================
    
    match /planograms/{planogramId} {
      // All org members can read planograms
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      
      // All org members can create planograms
      allow create: if isAuthenticated() && belongsToOrg(request.resource.data.organizationId);
      
      // Creator and admins can update
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        isAdminOrManager(resource.data.organizationId)
      );
      
      // Only admins can delete
      allow delete: if isAdminOrManager(resource.data.organizationId);
      
      // Planogram versions subcollection
      match /versions/{versionId} {
        allow read: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/planograms/$(planogramId)).data.organizationId);
        allow create: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/planograms/$(planogramId)).data.organizationId);
        allow update, delete: if false; // Versions are immutable
      }
      
      // Planogram assignments subcollection
      match /assignments/{assignmentId} {
        allow read: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/planograms/$(planogramId)).data.organizationId);
        allow write: if isAdminOrManager(get(/databases/$(database)/documents/planograms/$(planogramId)).data.organizationId);
      }
    }
    
    // ============================================
    // STORES COLLECTION
    // ============================================
    
    match /stores/{storeId} {
      // All org members can read stores
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      
      // Admins and managers can create stores (for CSV import)
      allow create: if isAuthenticated() && 
                       belongsToOrg(request.resource.data.organizationId) &&
                       isAdminOrManager(request.resource.data.organizationId);
      
      // Admins and managers can update stores
      allow update: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
      
      // Admins and managers can delete stores
      allow delete: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
    }
    
    // ============================================
    // INVENTORY COLLECTION
    // ============================================
    
    match /inventory/{inventoryId} {
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      allow write: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
    }
    
    // ============================================
    // FIELD TEAMS COLLECTION (fieldTeams)
    // ============================================
    
    match /fieldTeams/{teamId} {
      // All org members can read field teams
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      
      // Admins and managers can create field teams
      allow create: if isAuthenticated() && 
                       belongsToOrg(request.resource.data.organizationId) &&
                       isAdminOrManager(request.resource.data.organizationId);
      
      // Admins and managers can update field teams
      allow update: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
      
      // Admins and managers can delete field teams
      allow delete: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
    }
    
    // Legacy field-teams collection (keeping for backwards compatibility)
    match /field-teams/{teamId} {
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      allow write: if isAdminOrManager(resource.data.organizationId);
      
      // Team members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/field-teams/$(teamId)).data.organizationId);
        allow write: if isAdminOrManager(get(/databases/$(database)/documents/field-teams/$(teamId)).data.organizationId);
      }
      
      // Team visits subcollection
      match /visits/{visitId} {
        allow read: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/field-teams/$(teamId)).data.organizationId);
        allow create: if isAuthenticated() && belongsToOrg(get(/databases/$(database)/documents/field-teams/$(teamId)).data.organizationId);
        allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
        allow delete: if isAdminOrManager(get(/databases/$(database)/documents/field-teams/$(teamId)).data.organizationId);
      }
    }
    
    // ============================================
    // REPORTS COLLECTION
    // ============================================
    
    match /reports/{reportId} {
      allow read: if isAuthenticated() && belongsToOrg(resource.data.organizationId);
      allow create: if isAuthenticated() && belongsToOrg(request.resource.data.organizationId);
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        isAdminOrManager(resource.data.organizationId)
      );
    }
    
    // ============================================
    // NOTIFICATIONS COLLECTION
    // ============================================
    
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isOwner(resource.data.userId);
      
      // System can create notifications
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read)
      allow update: if isOwner(resource.data.userId);
      
      // Users can delete their own notifications
      allow delete: if isOwner(resource.data.userId);
    }
    
    // ============================================
    // ACTIVITY LOG COLLECTION
    // ============================================
    
    match /activity-log/{logId} {
      // Admins can read activity logs for their org
      allow read: if isAuthenticated() && isAdminOrManager(resource.data.organizationId);
      
      // System can create logs
      allow create: if isAuthenticated();
      
      // Logs are immutable
      allow update, delete: if false;
    }
  }
}
